
// 1. 导入数据
// ==============================
var co2 = ee.FeatureCollection('projects/ee-71magicsong/assets/CO2_guangzhou');
var ntl = ee.FeatureCollection('projects/ee-71magicsong/assets/NTL_guangzhou');
var landcover = ee.FeatureCollection('projects/ee-71magicsong/assets/landcover_guangzhou');
var population = ee.FeatureCollection('projects/ee-71magicsong/assets/population_guangzhou');
var roi = co2;

// 检查原始数据点数量
print('原始CO2数据点数量:', co2.size());
print('原始NTL数据点数量:', ntl.size());
print('原始土地覆盖数据点数量:', landcover.size());
print('原始人口数据点数量:', population.size());

// 在地图上展示研究区域
Map.addLayer(roi, {}, '研究区域');
Map.centerObject(roi);

// ==============================
// 2. 矢量转栅格
// ==============================

// 将矢量数据转换为栅格图像
var co2_img = co2.reduceToImage({
  properties: ['RASTERVALU'],
  reducer: ee.Reducer.first()
}).reproject(ee.Projection('EPSG:4326').atScale(1000))
  .rename('co2');

var landcover_img = landcover.reduceToImage({
  properties: ['RASTERVALU'],
  reducer: ee.Reducer.first()
}).reproject(ee.Projection('EPSG:4326').atScale(1000))
  .rename('landcover');

var population_img = population.reduceToImage({
  properties: ['RASTERVALU'],
  reducer: ee.Reducer.first()
}).reproject(ee.Projection('EPSG:4326').atScale(1000))
  .rename('population');

var ntl_img = ntl.reduceToImage({
  properties: ['RASTERVALU'],
  reducer: ee.Reducer.first()
}).reproject(ee.Projection('EPSG:4326').atScale(1000))
  .rename('ntl');

// ==============================
// 3. 特征工程：土地覆盖虚拟变量和特征归一化
// ==============================

// 方法1：直接使用预定义的土地覆盖类型值
// 根据您的描述，有7种有效的土地覆盖类型
var landcoverClasses = [10, 20, 30, 40, 50, 60, 70]; // 替换为您的实际土地覆盖类型值

// 创建土地覆盖类型的虚拟变量图像
var dummyBands = [];
for (var i = 0; i < landcoverClasses.length - 1; i++) { // 只使用k-1个类别避免多重共线性
  var classValue = landcoverClasses[i];
  var dummyBand = landcover_img.eq(ee.Number(classValue)).rename('lc_' + classValue);
  dummyBands.push(dummyBand);
}

// 将所有虚拟变量合并为一个多波段图像
var landcover_dummy = ee.Image.cat(dummyBands);

// 计算用于归一化的统计数据
var populationStats = population_img.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi.geometry(),
  scale: 1000,
  maxPixels: 1e13
});

var ntlStats = ntl_img.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi.geometry(),
  scale: 1000,
  maxPixels: 1e13
});

// 归一化人口和夜间灯光数据
var population_norm = population_img.subtract(ee.Number(populationStats.get('population_min')))
  .divide(ee.Number(populationStats.get('population_max')).subtract(ee.Number(populationStats.get('population_min'))))
  .rename('population_norm');

var ntl_norm = ntl_img.subtract(ee.Number(ntlStats.get('ntl_min')))
  .divide(ee.Number(ntlStats.get('ntl_max')).subtract(ee.Number(ntlStats.get('ntl_min'))))
  .rename('ntl_norm');

// 合并所有特征图像
var com_img = ee.Image.cat([
  landcover_dummy, 
  population_norm, 
  ntl_norm
]);

print('特征图像:', com_img);

// ==============================
// 4. 计算每个网格的特征值（用于训练）
// ==============================

// 创建初始特征集合（未过滤）
var initial_class_fea = co2.map(function(fea) {
  // 对每个网格提取特征值
  var stats = com_img.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: fea.geometry(),
    scale: 1000,
    crs: 'EPSG:4326',
    maxPixels: 1e13
  });
  
  // 获取CO2值作为目标变量
  var co2Value = fea.get('RASTERVALU');
  
  // 将统计结果和CO2值设为属性返回
  return fea.set(stats).set('co2_value', co2Value);
});

print('提取特征前的样本数量:', initial_class_fea.size());

// 过滤掉无效值
var class_fea = initial_class_fea.filter(ee.Filter.notNull(['ntl_norm']));
print('过滤后的训练数据数量:', class_fea.size());

// 检查每个特征的null值情况
var bandNames = com_img.bandNames();
var nullCheckResults = bandNames.map(function(band) {
  var notNullCount = initial_class_fea.filter(ee.Filter.notNull([band])).size();
  return ee.Feature(null, {
    'feature': band,
    'valid_count': notNullCount,
    'null_count': initial_class_fea.size().subtract(notNullCount)
  });
});

print('各特征的缺失值统计:', ee.FeatureCollection(nullCheckResults));

print('训练数据示例:', class_fea.limit(5));

// ==============================
// 5. 特征相关性分析
// ==============================

// 准备相关性分析的数据
var correlationSample = class_fea.randomColumn('random');
var correlationData = correlationSample.filter(ee.Filter.lt('random', 0.3)); // 使用30%的数据进行相关性分析

// 获取所有特征名称
var bandNames = com_img.bandNames();
print('所有特征名称:', bandNames);

// 计算每个特征与CO2的相关性
var correlationsList = bandNames.getInfo().map(function(band) {
  var correlation = correlationData.reduceColumns({
    reducer: ee.Reducer.pearsonsCorrelation(),
    selectors: [band, 'co2_value']
  });
  
  return ee.Feature(null, {
    'feature': band,
    'correlation': correlation.get('correlation'),
    'correlation_abs': ee.Number(correlation.get('correlation')).abs()
  });
});

// 将相关性结果转换为FeatureCollection并按相关性绝对值排序
var correlationsFC = ee.FeatureCollection(correlationsList)
  .sort('correlation_abs', false);

print('特征与CO2的相关性排序:', correlationsFC);

// 导出相关性结果
Export.table.toDrive({
  collection: correlationsFC,
  description: 'Feature_Correlations',
  fileFormat: 'CSV'
});

// ==============================
// 6. 准备训练和测试数据
// ==============================

// 随机分割训练集和测试集
var split = 0.7;  // 70%用于训练，30%用于测试
var withRandom = class_fea.randomColumn('random');
var trainingSet = withRandom.filter(ee.Filter.lt('random', split));
var testingSet = withRandom.filter(ee.Filter.gte('random', split));

print('训练集样本数量:', trainingSet.size());
print('测试集样本数量:', testingSet.size());

// 获取相关性较高的特征（前6个）
var topFeaturesInfo = correlationsFC.limit(6).aggregate_array('feature').getInfo();
print('选择用于模型的顶级特征:', topFeaturesInfo);

// ==============================
// 7. 随机森林回归训练
// ==============================

// 使用随机森林进行回归建模（使用所有特征）
var allFeaturesRF = ee.Classifier.smileRandomForest(200)
  .setOutputMode('REGRESSION')
  .train({
    features: trainingSet,
    classProperty: "RASTERVALU",
    inputProperties: bandNames
  });

// 使用随机森林进行回归建模（仅使用相关性高的特征）
var topFeaturesRF = ee.Classifier.smileRandomForest(200)
  .setOutputMode('REGRESSION')
  .train({
    features: trainingSet,
    classProperty: "RASTERVALU",
    inputProperties: topFeaturesInfo
  });

// 使用训练好的模型对图像进行预测
var predictedImageAll = com_img.classify(allFeaturesRF)
  .clip(roi)
  .float()
  .rename('predicted_all');

var predictedImageTop = com_img.classify(topFeaturesRF)
  .clip(roi)
  .float()
  .rename('predicted_top');

// 显示预测结果图像
var visParams = {
  min: 0,
  max: ee.Number(co2.aggregate_mean('RASTERVALU')).multiply(2).getInfo(),
  palette: ['blue', 'cyan', 'green', 'yellow', 'orange', 'red']
};

Map.addLayer(co2_img, visParams, '实际CO2排放');
Map.addLayer(predictedImageAll, visParams, '预测CO2排放(所有特征)');
Map.addLayer(predictedImageTop, visParams, '预测CO2排放(顶级特征)');

// ==============================
// 8. 模型评估
// ==============================

// 对测试集进行预测
var testPredictAll = testingSet.classify(allFeaturesRF, 'predicted_all');
var testPredictTop = testingSet.classify(topFeaturesRF, 'predicted_top');

// 计算所有特征模型的R²和RMSE
var allFeaturesStats = testPredictAll.reduceColumns({
  reducer: ee.Reducer.pearsonsCorrelation(),
  selectors: ['RASTERVALU', 'predicted_all']
});

var allFeaturesRMSE = testPredictAll.map(function(feature) {
  var diff = ee.Number(feature.get('RASTERVALU')).subtract(ee.Number(feature.get('predicted_all')));
  return feature.set('diff_sq', diff.pow(2));
}).reduceColumns({
  reducer: ee.Reducer.mean(),
  selectors: ['diff_sq']
});

// 计算顶级特征模型的R²和RMSE
var topFeaturesStats = testPredictTop.reduceColumns({
  reducer: ee.Reducer.pearsonsCorrelation(),
  selectors: ['RASTERVALU', 'predicted_top']
});

var topFeaturesRMSE = testPredictTop.map(function(feature) {
  var diff = ee.Number(feature.get('RASTERVALU')).subtract(ee.Number(feature.get('predicted_top')));
  return feature.set('diff_sq', diff.pow(2));
}).reduceColumns({
  reducer: ee.Reducer.mean(),
  selectors: ['diff_sq']
});

// 输出评估结果
print('所有特征模型 - R:', allFeaturesStats.get('correlation'));
print('所有特征模型 - R²:', ee.Number(allFeaturesStats.get('correlation')).pow(2));
print('所有特征模型 - RMSE:', ee.Number(allFeaturesRMSE.get('mean')).sqrt());

print('顶级特征模型 - R:', topFeaturesStats.get('correlation'));
print('顶级特征模型 - R²:', ee.Number(topFeaturesStats.get('correlation')).pow(2));
print('顶级特征模型 - RMSE:', ee.Number(topFeaturesRMSE.get('mean')).sqrt());

// ==============================
// 9. 导出结果
// ==============================

// 导出模型评估结果
var evaluationResults = ee.FeatureCollection([
  ee.Feature(null, {
    'model': 'All Features',
    'R': allFeaturesStats.get('correlation'),
    'R_squared': ee.Number(allFeaturesStats.get('correlation')).pow(2),
    'RMSE': ee.Number(allFeaturesRMSE.get('mean')).sqrt(),
    'features_used': bandNames.size()
  }),
  ee.Feature(null, {
    'model': 'Top Features',
    'R': topFeaturesStats.get('correlation'),
    'R_squared': ee.Number(topFeaturesStats.get('correlation')).pow(2),
    'RMSE': ee.Number(topFeaturesRMSE.get('mean')).sqrt(),
    'features_used': ee.List(topFeaturesInfo).size()
  })
]);

Export.table.toDrive({
  collection: evaluationResults,
  description: 'Model_Evaluation_Results',
  fileFormat: 'CSV'
});

// 导出训练数据
Export.table.toDrive({
  collection: class_fea,
  description: 'Training_Data_With_Features',
  fileFormat: 'CSV'
});

// 导出预测结果
Export.image.toDrive({
  image: predictedImageTop,
  description: 'CO2_Prediction_Map',
  scale: 1000,
  region: roi.geometry(),
  fileFormat: 'GeoTIFF'
});
