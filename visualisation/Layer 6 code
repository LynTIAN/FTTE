// 1. Load Guangzhou boundary (replace with your own asset ID if different)
var guangzhouBoundary = ee.FeatureCollection(
  'projects/ee-chenyixuan0402/assets/GZBoundary'
);

// 2. Load nighttime lights feature collection
var ntlFC = ee.FeatureCollection(
  'projects/ee-chenyixuan0402/assets/NTL0422'
);

// 3. Print a sample and the property names to confirm the light-intensity field
print('Sample NTL features:', ntlFC.limit(5));
print('Property names:', ntlFC.first().propertyNames());
// Look for the "RASTERVALU" field, which holds the light intensity values.

// 4. Define classification thresholds and matching colors
var thresholds = [0, 5, 10, 20, 30, 50];
var palette = [
  '#00000000',  // â‰¤ 0: transparent (no light)
  '#202040',    // (0,5]
  '#4080c0',    // (5,10]
  '#80c0ff',    // (10,20]
  '#ffff80',    // (20,30]
  '#ffffff'     // > 30
];

// 5. Style each feature according to its intensity
var styledFeatures = ntlFC.map(function(feature) {
  var intensity = ee.Number(feature.get('RASTERVALU'));
  var fillColor = ee.String(
    ee.Algorithms.If(intensity.lte(thresholds[0]), palette[0],
    ee.Algorithms.If(intensity.lte(thresholds[1]), palette[1],
    ee.Algorithms.If(intensity.lte(thresholds[2]), palette[2],
    ee.Algorithms.If(intensity.lte(thresholds[3]), palette[3],
    ee.Algorithms.If(intensity.lte(thresholds[4]), palette[4],
                                      palette[5]
    )))))
  );
  return feature.set('style', ee.Dictionary({
    fillColor: fillColor,
    color:     '000000',  // black border
    width:     0.3
  }));
});

// 6. Add layers to the map
Map.centerObject(guangzhouBoundary, 8);
Map.addLayer(
  styledFeatures.style({styleProperty: 'style'}),
  {},
  'Nighttime Lights (Classified)'
);

// 7. Build a legend panel
var legend = ui.Panel({
  style: { position: 'bottom-left', padding: '8px 15px' }
});
legend.add(ui.Label('Nighttime Light Intensity', { fontWeight: 'bold' }));

var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: {
    bbox:       [0, 0, 1, 0.1],
    dimensions: '200x10',
    format:     'png',
    min:        0,
    max:        1,
    palette:    palette
  },
  style: { stretch: 'horizontal', margin: '0 0 4px 0' }
});
legend.add(colorBar);

// 8. Add thresholds as tick labels
var tickValues = [
  thresholds[0],
  thresholds[1],
  thresholds[2],
  thresholds[3],
  thresholds[4],
  '> ' + thresholds[4]
];
var tickPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
  style:  { stretch: 'horizontal' }
});
tickValues.forEach(function(val) {
  tickPanel.add(ui.Label(val, { margin: '0 25px' }));
});
legend.add(tickPanel);

Map.add(legend);
